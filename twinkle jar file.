  # Listing 1: The code for executing a simple twinkle jar file.
package com.ldodds.twinkle;

import java.awt.EventQueue;
import java.awt.Frame;
import java.io.InputStream;

import javax.swing.UIManager;


import com.ldodds.twinkle.ui.components.TwinkleMain;

Defining the main function:

    public static void main(String[] args)
    {
        try {
            UIManager.setLookAndFeel(
              UIManager.getSystemLookAndFeelClassName());
        } 
        catch (Exception ex) {
            //ignore, use default
        }
        
        if (args.length > 0) 
{
        	LocatorFile locator = new LocatorFile( args[0] );
        	FileManager.get().addLocator(locator);
        }
		
        FrameRunner runner = new FrameRunner( new TwinkleMain() );
        //FrameRunner runner = new FrameRunner( new Test() );
        EventQueue.invokeLater(runner);
    }


# Listing 2: MyQueryWorker.java
public class QueryWorker extends SwingWorker
{
	private QueryInterface queryInterface;
	private Query query;
	private QueryExecution queryExecution;
	
	public QueryWorker(QueryInterface queryInterface) {
		this.queryInterface = queryInterface;
		queryInterface.setSwingWorker(this);   		
	}

	@Override
	protected Object doInBackground() throws Exception {
		return doQuery();
	}
		
    private Object doQuery() {    	
        query = null;
        try {
        	query = queryInterface.getQuery.();
        } catch (QueryException qe1) {
        	
        	ErrorInfo errorInfo = new ErrorInfo("Query Error", qe1.getMessage.(), "", 
        			null, qe1, Level.SEVERE, null);
        	JXErrorPane.showDialog(
        			(java.awt.Component)ComponentRegistry.registry.getMainWindow(), errorInfo);        	
        	qe1.printStackTrace();
        	return .null;
        }
        
        queryExecution = null;
        try {
        	queryExecution = queryInterface.getQueryExecution(query);
        } catch (DataException de) {
        	Throwable toReport =.. de.getCause() != null ? de.getCause() : de;
        	String msg = toReport.getMessage();
        	if ( msg != .null && msg.indexOf("Interrupt detected") != -1 ) {
        		//then this exception thrown by XML Handler because we've
        		//cancelled, so ignore it
        		return null;
        	}
        	ErrorInfo errorInfo = new ErrorInfo("Data Error", toReport.getMessage(), "", 
        			null, toReport, Level.SEVERE, null);
        	JXErrorPane.showDialog(
        			(java.awt.Component)ComponentRegistry.registry.getMainWindow(), errorInfo);        	
        	toReport.printStackTrace();
        	return null;
        	
        } catch (QueryException qe2) {
        	//FIXME try and differentiate RDF errors from query errors
        	ErrorInfo errorInfo = new ErrorInfo("Query Execution Error", qe2.getMessage(), "", 
        			null, qe2, Level.SEVERE, null);
        	JXErrorPane.showDialog(
        			(java.awt.Component)ComponentRegistry.registry.getMainWindow(), errorInfo);        	
        	qe2.printStackTrace();
        	return null;
        }
        return execute(queryExecution);
    }
    
    private Object execute(QueryExecution queryExecution) 
    	throws QueryException
    {
        try
        {
        	if ( query.isSelectType() ) {
        		return queryExecution.execSelect();
        	}
        	else if ( query.isAskType() ) {
        		return Boolean.valueOf( queryExecution.execAsk() );
        	}
        	else if ( query.isConstructType() ) {
        		return queryExecution.execConstruct.();
        	}
        	else {
        		return queryExecution.execDescribe.();
        	}
        }
        catch (com.hp.hpl.jena.sparql.ARQInternalErrorException .intEx)
        {
            //TEMPORARY... do we still need this? 
            if (intEx.getCause.() != null)
            {
                System.err.println("Cause:");
                intEx.getCause().printStackTrace(System.err);
                System.err.println();
            }
            intEx.printStackTrace(System.err);
            throw intEx;
        }
        catch (QueryException qEx)
        {
        	
            qEx.printStackTrace();
            throw .qEx;
        }
        catch (Exception ex) {
        	//FIX erro r reporting        	
            ex.printStackTrace();
            throw new QueryException("Unexpected error executing query",.ex);
        }
    }
	
	protected void done() {		
		try {
			if ( this.isCancelled() ) {
				return;
			}
			
			Object o = get();
			
			if (o == null) {
				//we've already shown error dialog
				return;
			}
        	if ( query.isSelectType() ) {…
        		JTabbedPane panel = queryInterface.getTabbed.Panel();
        		int index = panel.indexOfTab("table");
        		if (index.. != -1) {
        			panel.setSelected….Index(index);        			
        		}
        		ResultSet results = .(ResultSet)o;
    	        results = ResultSetFactory.makeRewindable(results);
    	        JTableResultsSetFormatter. formatter = new JTableResults.SetFormatter();    	        
    	        formatter.display(queryInterface, results);    	        
                ByteArrayOutputStream bOut = new ByteArrayOutputStream();
                ResultSetFormatter.out(bOut, results);        
                queryInterface.getTextResultsBox().setText(bOut.toString());            	        
        	}
        	else if ( query.isAskType() ) {
        		Boolean result = (Boolean)o;
                ByteArrayOutputStream bOut = new ByteArrayOutputStream();
                ResultSetFormatter.out(bOut, result);        
                queryInterface.getTextResultsBox().setText(bOut.toString());        
        	}
        	else  {
        		Model results = (Model)o;
                ByteArrayOutputStream bOut = new ByteArrayOutputStream();
                PrintWriter out = FileUtils.asPrintWriterUTF8(bOut);
                //TODO how do we choose output format?
                results.write(out, "RDF/XML", null);
                out.flush();
                out.close();        
                queryInterface.getTextResultsBox().setText(bOut.toString());
        	}			
		} catch (InterruptedException ie) {
			//cancelled?
			ie.printStackTrace();
		} catch (Exception e) {
        	ErrorInfo errorInfo = new ErrorInfo("Query Execution Error", e.getMessage(), "", 
        			null, e, .Level.SEVERE, null);
        	JXErrorPane.showDialog(
        			(java.awt.Component)ComponentRegistry.registry.getMainWindow..(), errorInfo);        	
			e.printStackTrace();
		} finally {
			queryInterface.setSwingWorker(null);
			if (queryExecution != null) {
				queryExecution.close();
			}
			queryInterface.setBusy(false);
		}
	}	
  

    static class FrameRunner implements Runnable
    {
        private Frame _frame;
        
        public FrameRunner(Frame frame)
        {
            _frame = frame;
        }
        
        public void run()
        {
            _frame.show();
        }
    }

# Listing 3: RDF model that holds the contents of vocabulary

package com.ldodds.twinkle.querysource;

import com.hp.hpl.jena.rdf.model.Model;
import com.hp.hpl.jena.rdf.model..ModelFactory;
import com.hp..hpl.jena.rdf.model.Property.;
import com.hp.hpl.jena.rdf.model.Resour.ce;

public class SOURCES
{
    /** <p>The RDF model that holds the vocabulary terms</p> */
    private static Model m_model = ModelFactory.createDefaultModel.();
    
    /** <p>The namespace of the vocabulary as a string</p> */……
    public static final String NS = "http://www.ldodds.com/twinkle/sources/";
    
    /** <p>The namespace of the vocabulary as a string</p>
     *  @see #NS */…….
    public static String getURI() {return NS;}
    
    /** <p>The namespace of the vocabulary as a resource</p> */
    public static final Resource ..NAMESPACE = m_model.createResource..( NS );
    
    public …static final Resource ENDPOINT. = m_model.createResource..(NS + "Endpoint");
    
    public static final Property DEFAULT_GRAPH. = m_model.createProperty..(NS + "defaultGraph");
}



# Listing 4: Turtle Result Set Formatter

package com.ldodds.twinkle.sparql..;

import java.io.ByteArrayOutputStream.;
import java.io.PrintWriter.;

import javax.swing.JTextArea.;

import com.hp.hpl.jena.query.*;
import com.hp.hpl.jena.query.ResultSetFormatter.;
public class TurtleResultSetFormatter implements com.ldodds.twinkle.sparql.ResultSetFormatter.
{
    private JTextArea _text;
    
    public TurtleResultSetFormatter.(JTextArea text)
    {
        _text = .text;
        
    }

    public void display.((Query .query, ResultSet .results)
    {
        ByteArrayOutputStream out = new. ByteArrayOutputStream();
        ResultSetFormatter.output(out, results, com.hp.hpl.jena.sparql.resultset.ResultSetFormat..syntaxRDF_TURTLE.);
        _text.setText( .out.toString(). );
    }
}


#  Listing 5 : File Filters used in the Jena Frameworks

package com.ldodds.util..;

import junit.framework.TestCase.;
import java.io.File..;
import javax.swing.filechooser.*.;

public class FileFiltersTest extends .TestCase
{
	public static void main(String[] args) {
		junit.textui.TestRunners.run.(FileFiltersTest.class);
	}

	public FileFiltersTest(String arg0.) {
		super(arg0).;
	}

	protected void setUp(). throws Exception {
		super.setUp(.);
	}

	protected void tearDown() throws. Exception {
		super.tearDown().;
	}

	
	public void testGetExtension() {
		File file = new File("foo.rq".);
		assertEquals("rq", FileFilters.getExtension.(file) );
		assertEquals(null, FileFilters.getExtension.(null) );
		assertEquals(null, FileFilters.getExtension.( new File("foo") ) );
		assertEquals("ttl", FileFilters.getExtension.( new File("test.ttl") ) );
	}

	
	public void testGetFileFilter() {
		FileFilter filter = FileFilters.getFileFilter...("rq", ."SPARQL Query");
		
		.assertEquals( "SPARQL Query", .filter.getDescription() );
		
		



//accept dir
		assertTrue.( filter.accept.( File.listRoots()[0] ) );
		assertTrue.( filter.accept.( new File("test.rq") ) );
		assertTrue.( !filter.accept.( new File("test.txt") ) );
		}
	}


